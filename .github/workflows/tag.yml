name: Build and Package Release

on:
  push:
    tags: '*'

jobs:
  validate-tag:
    name: Validate tag format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract the tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Validate the tag format
        id: validate_semver
        run: |
          if [[ ! "${{ env.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '${{ env.tag }}' does not conform to SemVer."
            exit 1
          else
            echo "Tag ${{ env.tag }} is a valid tag."
          fi
          
  validate-data-folder:
    name: Ensure a migration folder exists
    needs: validate-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Check if a data folder exists for the tag
        id: check_folder
        run: |
          echo "Checking if a folder for ${GITHUB_REF#refs/tags/} exists"
          if [ ! -d "data/migrations/${GITHUB_REF#refs/tags/}" ]; then
            echo "Error: No folder exists in /data/migrations matching the tag '${GITHUB_REF#refs/tags/}'."
            echo "$(pwd)"
            echo "$(ls -l )"
            echo "$(ls -l data/migrations/)"
            exit 1
          fi

  check-migration-changes:
    name: Ensure other migration files are untouched
    needs: validate-tag
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git fetch --tags --prune --unshallow

      - name: Get current release version
        id: get_current_version
        run: echo "CURRENT_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Get previous release version
        id: get_previous_version
        run: |
          PREVIOUS_VERSION=$(git tag --sort=v:refname | grep -v "$CURRENT_VERSION" | tail -n 1)
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Compare files between versions
        run: |
          echo "Comparing changes between $PREVIOUS_VERSION and $CURRENT_VERSION"
          if [ -z $PREVIOUS_VERSION ]; then
            echo "No previous version found"
            exit 0
          else
            CHANGED_FILES=$(git diff --name-only $PREVIOUS_VERSION $CURRENT_VERSION)
            MIGRATIONS_PATH="migrations"
            CHANGED_IN_MIGRATIONS=$(echo "$CHANGED_FILES" | grep "migrations/")
            FORBIDDEN_CHANGES=$(echo "$CHANGED_IN_MIGRATIONS" | grep -v "migrations/$CURRENT_VERSION")
  
            if [ -n "$FORBIDDEN_CHANGES" ]; then
                echo "The following changes are illegal:"
                echo "$FORBIDDEN_CHANGES"
                for CHANGE in ${FORBIDDEN_CHANGES}; do
                  if git cat-file -e "${PREVIOUS_VERSION}:${CHANGE}" 2>/dev/null; then
                    git show "${PREVIOUS_VERSION}:${CHANGE}" > "${CHANGE}"
                    echo "Replaced ${CHANGE} with version from ${PREVIOUS_VERSION}: "
                    echo $(git show "${PREVIOUS_VERSION}:${CHANGE}")
                  else
                    echo "File ${FILE} does not exist in ${PREVIOUS_TAG}. Deleting $CHANGE."
                    rm "$CHANGE"
                  fi
                done
            fi
            echo "All changes are contained within $MIGRATIONS_PATH/$CURRENT_VERSION."
          fi
          exit 0
      - name: Configure Git
        run: |
  
      - name: Commit and push changes to the main branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/.
          git commit -m "reset data files outside of the data/$PREVIOUS_VERSION folder"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
