name: Build and Package Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to upload assets to releases
      actions: read    # Needed to access action outputs

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
        
    - name: Build Go binary
      run: |
        VERSION=$(git describe --tags)
        cd backend
        CGO_ENABLED=0 go build -ldflags "-X 'github.com/${{ github.repository }}/version.Version=${VERSION}'" -o main .

    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx
        ls ${{ github.workspace }}
        upx --best --lzma ${{ github.workspace }}/backend/main
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Build Vue frontend
      run: |
        cd frontend
        npm install
        npm run build-only

    - name: Create a zip file with the frontend artifacts
      run: |
          zip -r vue3-app.zip frontend/dist

    - name: Get Release ID
      id: get_release_id
      run: |
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .id)
        echo "RELEASE_ID=$release_id" >> $GITHUB_ENV
        
    - name: Get upload URL
      id: geturl
      run:   |
         echo "upload_url:${{ github.event.release.upload_url }}"
         echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_ENV
         upload_url=$(curl -sL https://api.github.com/repos/${{github.repository}}/releases/latest?access_token=${{ secrets.GITHUB_TOKEN }} | jq -r '.upload_url')
         echo ::set-output name=upload_url::$upload_url
         ls -l
         
    - name: Print Event Context
      run: echo "${{ toJson(github.event) }}"

    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: backend/main
        asset_name: main
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload frontend to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: vue3-app.zip
        asset_name: frontend.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  generate-tags-file:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install @octokit/rest node-fetch

    - name: Generate tags file
      run: |
        export OWNER="${{ github.repository_owner }}"
        export REPO="${{ github.event.repository.name }}"
        
        # Create a temporary script file to use import statements
        echo "
        import { Octokit } from '@octokit/rest';
        import fs from 'fs';
        import fetch from 'node-fetch';
        
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN, fetch: fetch });
        
        async function generateTagsFile() {
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          
          // Fetch all releases
          const releases = await octokit.repos.listReleases({ owner, repo });
          
          // Generate file content
          const fileContent = releases.data.map(release => {
            return \`- [\${release.tag_name}](\${release.html_url}): Assets:\\n\${release.assets.map(asset => \`  - [\${asset.name}](\${asset.browser_download_url})\`).join('\\n')}\`;
          }).join('\\n\\n');
          
          // Write content to file
          fs.writeFileSync('RELEASE_TAGS.md', fileContent);
        }
        
        generateTagsFile().catch(error => {
          console.error(error);
          process.exit(1);
        });
        " > generateTagsFile.mjs
        
        # Run the generated script as an ES module
        node --experimental-specifier-resolution=node generateTagsFile.mjs
        
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git fetch origin main
        git checkout main

    - name: Commit and push changes
      run: |
        git add RELEASE_TAGS.md
        git commit -m "Update RELEASE_TAGS.md with new release information"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
