name: Go Server Build

permissions:
  contents: write
  
on:
  release:
    types: [created]

jobs:
  build-and-package:
    name: Build and Package Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.20'

    # since this runs when releasing a new version
    - name: Get the version
      id: get_version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    # build the golang server
    # also pass ldflags (installation parameters)
    - name: Build Golang Server
      run: |
        cd backend
        go mod tidy
        go build -ldflags "-X setup.repository.Version=${{ env.RELEASE_VERSION }}" -v -o main ./main.go
        cd ..

    - name: Setup node.js
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: |
        cd frontend
        npm install
        npm run build-only
        cd ..

    - name: Copy results to root folder
      run: |
        mkdir release
        mkdir release/frontend
        ls -l
        cp backend/main release/
        cp -r frontend/dist/* release/frontend
        cp -r backend/data/db/migrations release/
        
    - name: Zip release folder
      run: zip -r release.zip release
      
    - name: Upload artifacts zip
      uses: actions/upload-artifact@v2
      with:
        name: release
        path: release

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip
