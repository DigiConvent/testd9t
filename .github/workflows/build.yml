name: Build and Package Release

on:
  release:
    types: [created]

jobs:
  valid-tag:
    name: Validate tag format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Extract the tag name
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Validate the tag format
        id: validate_semver
        run: |
          if [[ ! "${{ env.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '${{ env.tag }}' does not conform to SemVer."
            exit 1
          else
            echo "Tag ${{ env.tag }} is a valid tag."
          fi
          

  summarised-migrations:
    name: Summarise migrations for each package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract tag version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Create migrations folder
        run: mkdir -p .meta/migrations/${VERSION}
      - name: Generate SQL summaries
        run: |
          for pkg in backend/pkg/*; do
            pkg_name=$(basename "$pkg")
            sql_dir="$pkg/db/$VERSION"
            output_file=".meta/migrations/${VERSION}/${pkg_name}.sql"

            if [[ -d "$sql_dir" ]]; then
              cat "$sql_dir"/*.sql > "$output_file"
              echo "Generated $output_file"
            else
              echo "No migrations found for $pkg_name in version $VERSION"
            fi
          done

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git checkout main
  
      - name: Commit and push changes to the main branch
        run: |
          git add .meta/migrations/${VERSION}
          git commit -m "Summarise migrations for packages"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compiled-artifacts:
    name: Build backend and frontend artifacts
    needs: summarised-migrations
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
        
    - name: Build Go binary
      run: |
        VERSION=$(git describe --tags)
        cd backend
        CGO_ENABLED=0 go build -ldflags "-X 'github.com/${{ github.repository }}/version.Version=${VERSION}'" -o main .

    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx
        ls ${{ github.workspace }}
        upx --best --lzma ${{ github.workspace }}/backend/main
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Build Vue frontend
      run: |
        cd frontend
        npm install
        npm run build-only

    - name: Create a zip file with the frontend artifacts
      run: |
          zip -r vue3-app.zip frontend/dist

    - name: Get Release ID
      id: get_release_id
      run: |
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .id)
        echo "RELEASE_ID=$release_id" >> $GITHUB_ENV
        
    - name: Get upload URL
      id: geturl
      run:   |
         echo "upload_url:${{ github.event.release.upload_url }}"
         echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_ENV
         upload_url=$(curl -sL https://api.github.com/repos/${{github.repository}}/releases/latest?access_token=${{ secrets.GITHUB_TOKEN }} | jq -r '.upload_url')
         echo ::set-output name=upload_url::$upload_url
         ls -l

    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: backend/main
        asset_name: main
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload frontend to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: vue3-app.zip
        asset_name: frontend.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generated-tags-file:
    name: Update .meta folder
    needs: compiled-artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant write permissions for this job to modify the repository

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install @octokit/rest node-fetch jq

    - name: Generate JSON tags file for all tags
      run: |
        export OWNER="${{ github.repository_owner }}"
        export REPO="${{ github.event.repository.name }}"

        mkdir -p .meta

        echo "[" > .meta/release_tags.json

        tags=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$OWNER/$REPO/tags")

        sorted_tags=$(echo "$tags" | jq -r '.[].name' | sort -V)
        for tag in $sorted_tags; do
          assets=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/releases/tags/$tag" | jq '.assets | map({name: .name, url: .browser_download_url})')
          
          migrations_folder=".meta/migrations/$tag"
          if [ -d "$migrations_folder" ]; then
            migrations=$(find "$migrations_folder" -type f -name "*.sql" | while read -r file; do
              filename=$(basename "$file")
              echo "{\"name\":\"$filename\",\"url\":\"https://raw.githubusercontent.com/$OWNER/$REPO/refs/tags/$tag/$file\"}"
            done | paste -sd, -)
            migrations="[$migrations]"
          else
            migrations="[]"
          fi
          
          echo "{\"tag\": \"$tag\", \"assets\": $assets, \"migrations\": $migrations}," >> .meta/release_tags.json
        done

        sed -i '$ s/,$//' .meta/release_tags.json
        echo "]" >> .meta/release_tags.json
        


        folders=$(find "install/" -mindepth 1 -maxdepth 1 -type d | while read -r folder; do
          folder_name=$(basename "$folder")
          echo "\"$folder_name\""
        done | paste -sd, -)
        if [ -n "$folders" ]; then
          folders="[$folders]"
        else
          folders="[]"
        fi
        echo $folders > .meta/flavours.json

        jq . .meta/release_tags.json > .meta/tmp.json && mv .meta/tmp.json .meta/release_tags.json
        jq . .meta/flavours.json > .meta/tmp.json && mv .meta/tmp.json .meta/flavours.json

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git fetch origin main
        git checkout main

    - name: Commit and push changes to the main branch
      run: |
        git add .meta/release_tags.json
        git add .meta/flavours.json
        git commit -m "Update release_tags.json with all release tags and assets"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
