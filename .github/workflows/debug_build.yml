name: Recreate Release on Go File Changes

on:
  push:
    branches:
      - main

jobs:
  check-go-files:
    runs-on: ubuntu-latest
    outputs:
      go_files_changed: ${{ steps.changed-backend-files.outputs.any_changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get changed files in the backend folder
        id: changed-backend-files
        uses: tj-actions/changed-files@v45
        with:
          files: backend/**/**.go

      - name: Run step if any file(s) in the backend folder change
        if: steps.changed-backend-files.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-backend-files.outputs.all_changed_files }}
        run: |
          echo "One or more files in the backend folder has changed."
          echo "List all the files that have changed: $ALL_CHANGED_FILES"

  recreate-release:  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Delete the release
        run: |
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \ "https://api.github.com/repos/DigiConvent/testd9t/releases/$release_id"
            echo "Release deleted successfully"
          else
            echo "Release not found"
          fi

      - name: Delete the tag
        run: |
          tag_name="0.0.0"
          repo="DigiConvent/testd9t"
          
        
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$repo/git/refs/tags/$tag_name"
            
      - name: Create a new tag
        id: create_tag
        run: |
          tag_name="0.0.0"
          repo="DigiConvent/testd9t"
        
          git tag $tag_name
          git push origin $tag_name
          echo "New tag $tag_name created successfully"

      - name: Create a new release
        run: |
          release_name="0.0.0"
          release_body=""
          repo="DigiConvent/testd9t"

        
          response=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name":"v1.0.1","name":"'"$release_name"'","body":"'"$release_body"'"}' \
            "https://api.github.com/repos/$repo/releases")

          echo "Release created successfully: $response"
